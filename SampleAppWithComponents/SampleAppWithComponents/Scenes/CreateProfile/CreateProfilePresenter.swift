//
//  CreateProfilePresenter.swift
//  SampleAppWithComponents
//
//  Created by Rahul Mane on 16/10/19.
//  Copyright (c) 2019 developer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreateProfilePresentationLogic{
    func presentSomething(response: CreateProfile.Something.Response)
    func presentUI(response: CreateProfile.UI.Response)
}

class CreateProfilePresenter: CreateProfilePresentationLogic
{
    weak var viewController: CreateProfileDisplayLogic?
    
    struct strings  {
        var info = "You will be able to create profile on this screen which will be used inside your app."
        var firstName =  "First Name"
        var lastName =  "Last Name"
        var phone =  "Phone number"
        var address = "Address"
        var submit =  "Save"
    }
    
    private var stringFile : strings!
    
    // MARK: Do something
    
    func presentSomething(response: CreateProfile.Something.Response)
    {
        let viewModel = CreateProfile.Something.ViewModel()
        viewController?.displaySomething(viewModel: viewModel)
    }
    
    func presentUI(response: CreateProfile.UI.Response){
        let cells = getCellConfig(types: response.uiComponenets)
        let viewModel = CreateProfile.UI.ViewModel(cellConfigs: cells)
        viewController?.displayUI(viewModel: viewModel)
    }
    
    private func getCellConfig(types : [CreateProfile.UIComponents]?) -> [(CreateProfile.UIComponents, BaseCellConfig)]?{
        stringFile = strings()
        
        guard let cellTypes = types else {
            return nil
        }
        
        var cells : [(CreateProfile.UIComponents, BaseCellConfig)] = []
        cellTypes.forEach { (type) in
            switch type {
            case .infoOfScreen:
                var config = LabelTableViewCellConfig()
                config.insets = UIEdgeInsets(top: 20, left: 25, bottom: 10, right: 25)
                let attributes = [NSAttributedString.Key.foregroundColor : UIColor.black,
                                  NSAttributedString.Key.font : AppManager.appStyle.font(for: .title)]
                
                config.labelText = NSAttributedString(string: stringFile.info,attributes : attributes as [NSAttributedString.Key : Any]);
                config.alignment = NSTextAlignment.center
                config.backgroundColor = UIColor.clear
                cells.append((.infoOfScreen, config))
            case .firstName:
                let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .title),
                                  NSAttributedString.Key.font : AppManager.appStyle.font(for: .title)]
                
                var config = TextfieldTableViewCellConfig()
                config.insets = UIEdgeInsets(top: 10, left: 25, bottom: 10, right: 25)
                config.placeHolder = stringFile.firstName
                config.backgroundColor = UIColor.clear
                config.title = NSAttributedString(string: stringFile.firstName, attributes: attributes)
                config.errorBackgroundColor = AppManager.appStyle.color(for: .errorBackgroud)
                cells.append((.firstName, config))
            case .lastName:
                let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .title),
                                  NSAttributedString.Key.font : AppManager.appStyle.font(for: .title)]
                
                var config = TextfieldTableViewCellConfig()
                config.placeHolder = stringFile.lastName
                config.title = NSAttributedString(string: stringFile.lastName, attributes: attributes)
                config.backgroundColor = UIColor.clear
                config.errorBackgroundColor = AppManager.appStyle.color(for: .errorBackgroud)
                config.insets = UIEdgeInsets(top: 10, left: 25, bottom: 10, right: 25)
                cells.append((.lastName, config))
            case .phoneNumber:
                let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .title),
                                  NSAttributedString.Key.font : AppManager.appStyle.font(for: .title)]
                
                var config = TextfieldTableViewCellConfig()
                config.placeHolder = stringFile.phone
                config.title = NSAttributedString(string: stringFile.phone, attributes: attributes)
                config.backgroundColor = UIColor.clear
                config.errorBackgroundColor = AppManager.appStyle.color(for: .errorBackgroud)
                config.insets = UIEdgeInsets(top: 10, left: 25, bottom: 10, right: 25)
                cells.append((.phoneNumber, config))
            case .address:
                let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .title),
                                  NSAttributedString.Key.font : AppManager.appStyle.font(for: .title)]
                
                var config = TextfieldTableViewCellConfig()
                config.placeHolder = stringFile.address
                config.title = NSAttributedString(string: stringFile.address, attributes: attributes)
                config.backgroundColor = UIColor.clear
                config.errorBackgroundColor = AppManager.appStyle.color(for: .errorBackgroud)
                config.insets = UIEdgeInsets(top: 10, left: 25, bottom: 10, right: 25)
                cells.append((.address, config))
            case .submit:
                var config = ButtonTableViewCellConfig()
                
                config.insets = UIEdgeInsets(top: 10, left: 80, bottom: 10, right: 80)
                let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .button),
                                  NSAttributedString.Key.font : AppManager.appStyle.font(for: .button)]
                
                config.buttonText = NSAttributedString(string: stringFile.submit,attributes:attributes);
                config.background = UIImage(named: "buttonBackground")
                cells.append((.submit, config))
            }
        }
        return cells;
    }
}
