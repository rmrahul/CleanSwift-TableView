//
//  LoginInteractor.swift
//  SampleAppWithComponents
//
//  Created by Rahul Mane on 20/09/19.
//  Copyright (c) 2019 developer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Validator

protocol LoginBusinessLogic{
    func doSomething(request: Login.Something.Request)
    func requiredUIForScreen(request: Login.UI.Request)
    func validate(request : Login.Validate.Request)
    func doSignIn(request: Login.SignIn.Request)
}

protocol LoginDataStore
{
    var email: String? { get set }
    var password: String? { get set }
}


class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
    var email: String? = ""
    var password: String? = ""
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    var validationWorker : ValidationWorker = ValidationWorker()
    
    //var name: String = ""
    
    var validationResultEmail : ValidationResult = .invalid([MyProjectErrorCode(message: "Required", errorCode: ErrorCodes.required)])
    var validationResultPassword : ValidationResult = .invalid([MyProjectErrorCode(message: "Required", errorCode: ErrorCodes.required)])

    
    // MARK: Do something
    
    func doSomething(request: Login.Something.Request){
        worker = LoginWorker()
        worker?.doSomeWork()
        
        let response = Login.Something.Response()
        presenter?.presentSomething(response: response)
    }
    
    func requiredUIForScreen(request: Login.UI.Request){        
        let uiComponenets = [Login.UIComponents.icon,
                             Login.UIComponents.email,
                             Login.UIComponents.password,                                    Login.UIComponents.forgotpassword,
                             Login.UIComponents.signInbutton,
                             Login.UIComponents.signInOption,
                             Login.UIComponents.signUpOption]
        
        let response = Login.UI.Response(uiComponenets: uiComponenets)
        presenter?.presentUI(response: response)
    }
    
    func validate(request : Login.Validate.Request){
        var emailResult, passwordResult : ValidationResult?
        
        if let value = request.email{
            validationResultEmail = validationWorker.validateEmail(email: value)
            emailResult =  validationResultEmail
            email =  value
        }
        
        if let value = request.password{
            validationResultPassword = validationWorker.validateIsEmpty(value: value)
            passwordResult =  validationResultPassword
            password =  value
        }

        let response = Login.Validate.Response(validationResultEmail: emailResult, validationResultPassword: passwordResult)
        presenter?.presentValidationResult(response: response)
    }
    
    func doSignIn(request: Login.SignIn.Request){
        if(validationResultEmail != .valid || validationResultPassword != .valid){
            let request = Login.Validate.Request(email: email, password: password)
            self.validate(request: request)
            return
        }
        
        //Perform API call.. and pass result to presentor..
    }
}
