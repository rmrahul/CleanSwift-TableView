//
//  LoginViewController.swift
//  SampleAppWithComponents
//
//  Created by Rahul Mane on 20/09/19.
//  Copyright (c) 2019 developer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import NVActivityIndicatorView

protocol LoginDisplayLogic: class{
    func displaySomething(viewModel: Login.Something.ViewModel)
    func displayUI(viewModel: Login.UI.ViewModel)
    func displayValidationErrors(viewModel : Login.Validate.ViewModel)
    
}

class LoginViewController: UIViewController, LoginDisplayLogic, UITableViewDataSource, UITableViewDelegate, LabelTableViewCellDelegate,NVActivityIndicatorViewable{
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    @IBOutlet weak var tableview: UITableView!

    private var cellConfigs : [(uiComponent : Login.UIComponents,config: BaseCellConfig)]?
    private var emailCell : TextfieldTableViewCell?
    private var passwordCell : TextfieldTableViewCell?

    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup(){
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?){
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.hideNavigationBar()
        addObserverForLangaugeChange()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        NotificationCenter.default.removeObserver(self)
    }
    
    override func viewDidLoad(){
        super.viewDidLoad()
        doSomething()
        setUpUI()
    }
    
    //MARK: Setup
    func setUpUI(){
        hideKeyboardWhenTappedAround()
        registerNibs()
        self.tableview.backgroundColor = UIColor.clear
        askForUI()
    }
    
    func registerNibs(){
        tableview.register(UINib(nibName: "RadioBoxGroupTableViewCell", bundle: nil), forCellReuseIdentifier: "radioCell")
        tableview.register(UINib(nibName: "MultiTextfieldsTableViewCell", bundle: nil), forCellReuseIdentifier: "multiSelectCell")
        tableview.register(UINib(nibName: "TextfieldTableViewCell", bundle: nil), forCellReuseIdentifier: "emailCell")
        tableview.register(UINib(nibName: "TextfieldTableViewCell", bundle: nil), forCellReuseIdentifier: "passwordCell")
        tableview.register(UINib(nibName: "ImageTableViewCell", bundle: nil), forCellReuseIdentifier: "iconCell")
        tableview.register(UINib(nibName: "LabelTableViewCell", bundle: nil), forCellReuseIdentifier: "forgotCell")
        tableview.register(UINib(nibName: "ButtonTableViewCell", bundle: nil), forCellReuseIdentifier: "signInCell")
        tableview.register(UINib(nibName: "ButtonTableViewCell", bundle: nil), forCellReuseIdentifier: "socialCell")
        tableview.rowHeight = UITableView.automaticDimension
        tableview.estimatedRowHeight = 140
    }
    
    // MARK: Presentor command
    func doSomething(){
        let request = Login.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func addObserverForLangaugeChange(){
        NotificationCenter.default.addObserver(self, selector: #selector(self.languageDidChange(notification:)), name: NSNotification.Name.init("languageDidChange"), object: nil)
    }
    
    @objc func languageDidChange(notification: Notification){
        askForUI()
    }
    
    func askForUI(){
        let request = Login.UI.Request()
        interactor?.requiredUIForScreen(request: request)
    }
    
    func displaySomething(viewModel: Login.Something.ViewModel){
    }
    
    func displayUI(viewModel: Login.UI.ViewModel) {
        cellConfigs = viewModel.cellConfigs
        tableview.reloadData()
    }
    
    func displayValidationErrors(viewModel: Login.Validate.ViewModel) {
        stopAnimating()        
        if let emailError = viewModel.errorMessageForEmail {
            self.emailCell?.showError(str: emailError)
        }
        
        if let emailError = viewModel.errorMessageForPassword {
            self.passwordCell?.showError(str: emailError)
        }
        
        tableview.refresh()
    }
    
    
    //MARK: Tableview source
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int{
        return cellConfigs?.count ?? 0 //viewmoDel.getNumberOfRows()
    }
    
    public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell{
        guard let cellDetails = cellConfigs?[indexPath.row]  else {
            return UITableViewCell()
        }
        
        switch cellDetails.uiComponent {
        case .icon :
            let cell = tableView.dequeueReusableCell(withIdentifier: "iconCell", for: indexPath) as! ImageTableViewCell
            cell.backgroundColor = UIColor.clear
            cell.configureCell(config: cellDetails.config as? ImageTableViewCellConfig)
            return cell
        case .email :
            let cell = tableView.dequeueReusableCell(withIdentifier: "emailCell", for: indexPath) as! TextfieldTableViewCell
            self.emailCell = cell
            
            cell.configureCell(config: cellDetails.config as? TextfieldTableViewCellConfig)
            cell.backgroundColor = UIColor.clear
            cell.textfield?.textfield.addTarget(self, action: #selector(self.emailDidChange), for: .editingChanged)
            return cell
        case .password :
            let cell = tableView.dequeueReusableCell(withIdentifier: "passwordCell", for: indexPath) as! TextfieldTableViewCell
            self.passwordCell = cell
            cell.backgroundColor = UIColor.clear
            cell.configureCell(config: cellDetails.config as? TextfieldTableViewCellConfig)
            cell.textfield?.textfield.isSecureTextEntry = true
            cell.textfield?.textfield.addTarget(self, action: #selector(self.passwordDidChange), for: .editingChanged)

            let button = cell.textfield?.addRightButton(image: UIImage(named: "showPassword")!, selecteImage: UIImage(named : "hidePassword")!)
            button?.addTarget(self, action: #selector(self.showPassword), for: .touchDown)
            return cell
        case .signInOption: fallthrough
        case .signUpOption: fallthrough
        case .forgotpassword:
            let cell = tableView.dequeueReusableCell(withIdentifier: "forgotCell", for: indexPath) as! LabelTableViewCell
            cell.backgroundColor = UIColor.clear
            cell.configureCell(config: cellDetails.config as? LabelTableViewCellConfig)
            //cell.delegate = self
            return cell
        case .signInbutton:
            let cell = tableView.dequeueReusableCell(withIdentifier: "signInCell", for: indexPath) as! ButtonTableViewCell
            //cell.backgroundColor = UIColor.clear
            cell.configureCell(config: cellDetails.config as? ButtonTableViewCellConfig)
            cell.button.addTarget(self, action: #selector(self.didTapedOnSignInButton(button:)), for: UIControl.Event.touchDown);
            
            return cell     
        }
    }
    
    // MARK: Button Actions
    @objc func didTappedOnGmail(button : UIButton){
        
    }
    
    @objc func didTappedOnFacebook(button : UIButton){
        
    }
    
    @objc func emailDidChange(textfield : UITextField){
        let request = Login.Validate.Request(email: textfield.text, password: nil)
        interactor?.validate(request: request)
    }
    
    //password
    @objc func passwordDidChange(textfield : UITextField){
        let request = Login.Validate.Request(email: nil, password: textfield.text)
        interactor?.validate(request: request)
    }
    
    @objc func showPassword(_ button : UIButton){
        button.isSelected = !button.isSelected
        passwordCell?.textfield?.textfield.isSecureTextEntry = !(passwordCell?.textfield?.textfield.isSecureTextEntry)!
    }
    
    //MARK: Label delegate
    func didSelectLinkWith(url: URL!) {
        // pass it to interactor to take decision
        //        let request = Login.Link.Request(selectedURL: url)
        //        interactor?.didSelectLink(request: request)
    }
    
    
    @objc func didTapedOnSignInButton(button : UIButton){
        //startAnimating()
        let request = Login.SignIn.Request()
        interactor?.doSignIn(request: request)
    }
    
}
