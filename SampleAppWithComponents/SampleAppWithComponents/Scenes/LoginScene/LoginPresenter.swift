//
//  LoginPresenter.swift
//  SampleAppWithComponents
//
//  Created by Rahul Mane on 20/09/19.
//  Copyright (c) 2019 developer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginPresentationLogic{
    func presentSomething(response: Login.Something.Response)
    func presentUI(response: Login.UI.Response)
    func presentValidationResult(response : Login.Validate.Response)
    func presentSignInAction(response : Login.SignIn.Response)
}

class LoginPresenter: LoginPresentationLogic{
    weak var viewController: LoginDisplayLogic?
    var validationWorker = ValidationWorker()

    struct strings  {
        var email = "Email address"
        var password =  "Password"
        var forgotPassword =  "Forgot password?"
        var signIn =  "Sign In"
        var clickableURLForgotPassword = "forgotPasswordURL"
        var clickableURLSignUp = "signUpURL"
        var signInOption =  "or sign in with"
        var gmail = "Gmail"
        var facebook = "Gmail"
        var signUp =  "Don't have an account? Sign Up Now"
    }
    
    private var stringFile = strings()
    
    // MARK: Do something
    
    func presentSomething(response: Login.Something.Response){
        let viewModel = Login.Something.ViewModel()
        viewController?.displaySomething(viewModel: viewModel)
    }
    
    func presentUI(response: Login.UI.Response){
        stringFile = strings()
        let cells = getCellConfig(types: response.uiComponenets)
        let viewModel = Login.UI.ViewModel(cellConfigs: cells)
        viewController?.displayUI(viewModel: viewModel)
    }
    
    func presentValidationResult(response: Login.Validate.Response) {
        
        let emailError = validationWorker.getValidationErrorMessage(validationResult: response.validationResultEmail)
        let passwordError = validationWorker.getValidationErrorMessage(validationResult: response.validationResultPassword)

        let viewModel = Login.Validate.ViewModel(errorMessageForEmail: emailError, errorMessageForPassword: passwordError)
        
        viewController?.displayValidationErrors(viewModel: viewModel)
    }
    
    func presentSignInAction(response : Login.SignIn.Response){
        let vm = Login.SignIn.ViewModel()
        viewController?.displayCreateProfile(viewModel: vm)
    }
    
    private func getCellConfig(types : [Login.UIComponents]?) -> [(Login.UIComponents, BaseCellConfig)]?{
        stringFile = strings()
        
        guard let cellTypes = types else {
            return nil
        }
        
        var cells : [(Login.UIComponents, BaseCellConfig)] = []
        cellTypes.forEach { (type) in
            switch type {
            case .icon:
                var config = ImageTableViewCellConfig()
                config.backgroundColor = UIColor.clear
                config.image = UIImage(named: "logo")
                config.insets = UIEdgeInsets(top: 50, left: 20, bottom: 50, right: 20)
                config.size  = CGSize(width: 100, height: 100)
                cells.append((.icon, config))
            case .email:
                let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .title),
                                  NSAttributedString.Key.font : AppManager.appStyle.font(for: .title)]

                var config = TextfieldTableViewCellConfig()
                config.insets = UIEdgeInsets(top: 10, left: 25, bottom: 10, right: 25)
                config.placeHolder = stringFile.email
                config.backgroundColor = UIColor.clear
                config.title = NSAttributedString(string: stringFile.email, attributes: attributes)
                config.errorBackgroundColor = AppManager.appStyle.color(for: .errorBackgroud)
                cells.append((.email, config))
            case .password:
                let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .title),
                                  NSAttributedString.Key.font : AppManager.appStyle.font(for: .title)]

                var config = TextfieldTableViewCellConfig()
                config.placeHolder = stringFile.password
                config.title = NSAttributedString(string: stringFile.password, attributes: attributes)
                config.backgroundColor = UIColor.clear
                config.errorBackgroundColor = AppManager.appStyle.color(for: .errorBackgroud)
                config.insets = UIEdgeInsets(top: 10, left: 25, bottom: 10, right: 25)
                cells.append((.password, config))
            case .forgotpassword:
                var config = LabelTableViewCellConfig()
                config.insets = UIEdgeInsets(top: 5, left: 25, bottom: 10, right: 25)
                let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.appThemeColor,
                                  NSAttributedString.Key.font : AppManager.appStyle.font(for: .subtitle)]
                
                config.labelText = NSAttributedString(string: stringFile.forgotPassword,attributes : attributes as [NSAttributedString.Key : Any]);
                config.alignment = NSTextAlignment.right
                config.backgroundColor = UIColor.clear
                let textRange = NSMakeRange(0, stringFile.forgotPassword.count)
                config.links = [(URL(string: stringFile.clickableURLForgotPassword),textRange)] as? [(URL, NSRange)]
                cells.append((.forgotpassword, config))
            case .signInbutton:
                var config = ButtonTableViewCellConfig()
                
                config.insets = UIEdgeInsets(top: 10, left: 80, bottom: 10, right: 80)
                let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .button),
                                  NSAttributedString.Key.font : AppManager.appStyle.font(for: .button)]
                
                config.buttonText = NSAttributedString(string: stringFile.signIn,attributes:attributes);
                config.background = UIImage(named: "buttonBackground")
                cells.append((.signInbutton, config))
            case .signInOption:
                var config = LabelTableViewCellConfig()
                config.insets = UIEdgeInsets(top: 10, left: 25, bottom: 10, right: 25)
                let attributes = [NSAttributedString.Key.foregroundColor : AppManager.appStyle.color(for: .subtitle),
                                  NSAttributedString.Key.font : AppManager.appStyle.font(for: .subtitle)]
                
                config.labelText = NSAttributedString(string: stringFile.signInOption, attributes: attributes)
                config.alignment = NSTextAlignment.center
                cells.append((.signInOption, config))
         case .signUpOption:
                var config = LabelTableViewCellConfig()
                config.insets = UIEdgeInsets(top: 10, left: 25, bottom: 10, right: 25)
                let attributes = [NSAttributedString.Key.foregroundColor : UIColor.black,
                                  NSAttributedString.Key.font : AppManager.appStyle.font(for: .title)]
                config.labelText = NSAttributedString(string: stringFile.signUp,attributes:attributes);
                config.alignment = NSTextAlignment.center
                config.backgroundColor = UIColor.clear
                let textRange = NSMakeRange(22, 12)
                config.links = [(URL(string: stringFile.clickableURLSignUp),textRange)] as? [(URL, NSRange)]
                cells.append((.signUpOption, config))            
            }
        }
        return cells;
    }
}
